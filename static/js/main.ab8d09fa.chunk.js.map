{"version":3,"sources":["images/loginHeadphones.jpg","authorization/config.ts","components/LoginButton/LoginButton.tsx","pages/LoginPage/LoginPage.tsx","components/Header/Header.tsx","components/SearchSection/SearchInput/SearchInput.tsx","components/SearchSection/SearchButton/SearchButton.tsx","store/actions/AddToFavouriteActions.ts","store/types/index.ts","store/actions/AuthorizationActions.ts","store/actions/FetchDataActions.ts","pages/LoadingPage/LoadingPage.tsx","components/SearchSection/SearchResults/Result/Result.tsx","components/SearchSection/SearchResults/SearchResult.tsx","store/actions/SearchingActions.ts","components/SearchSection/SearchSection.tsx","components/AlbumsSection/Tracks/Tracks.tsx","store/actions/PlayerActions.ts","components/AlbumsSection/AlbumDetails/AlbumDetails.tsx","components/AlbumsSection/Album/Album.tsx","store/actions/AlbumDetailsActions.ts","components/AlbumsSection/AlbumsSection.tsx","components/Main/Main.tsx","components/Footer/Footer.tsx","pages/WebsitePage/WebsitePage.tsx","App.tsx","serviceWorker.ts","store/reducers/AuthorizationReducers.ts","store/reducers/SearchingReducers.ts","store/reducers/AddToFavouriteReducers.ts","store/reducers/PlayerReducers.ts","store/reducers/AlbumDetailsReducers.ts","store/reducers/FetchDataReducers.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","URL","process","getCodeFromUrl","websiteHref","window","location","href","includes","slice","indexOf","length","refreshAccessToken","refresh_token","dispatch","setAccessTokens","urlencoded","URLSearchParams","append","myHeaders","Headers","btoa","fetch","method","headers","body","then","res","status","json","Error","access_token","catch","err","console","log","LoginButton","className","LoginPage","style","backgroundImage","loginHeadphones","Header","SearchInput","inputValue","setInputValue","isSearchResultsVisible","showResults","placeholder","type","value","onClick","onChange","e","target","SearchButton","deleteAlbumFromList","albumID","dataError","errorMessage","LoadingPage","Result","listOfAlbums","isFetching","useSelector","state","fetchData","featching","accessToken","authorization","favouriteAlbums","useDispatch","albums","filter","album","album_type","map","isDisabledAddBtn","find","favouriteAlbum","id","key","name","src","images","url","alt","artists","disabled","Authorization","albumObj","albumIMG","albumName","artistName","tracks","items","spotifyAlbumURL","external_urls","spotify","addAlbumToFavourite","message","fetchAlbumToFavourite","SearchResult","hideSearchResults","searchAlbums","showSearchResults","SearchSection","searching","useState","onSubmit","preventDefault","handleSubmit","Tracks","track","isTrackPlaying","stopBtnClasses","trackClasses","stopMusic","setAndPlayCurrentTrack","preview_url","track_number","trackURL","AlbumDetails","albumDetails","isPlaying","currentTrack","hideAlbumDetails","tracksListCurrentAlbum","rel","Album","showAlbumDetails","setAlbumDetails","isAlbumDetailsVisible","AlbumsSection","player","albumDetailsVisible","reverse","Main","Footer","WebsitePage","App","connectOptions","codeToGetAccess","String","fetchOptions","redirect","getOptionsToConnect","useEffect","localStorage","setItem","innerWidth","Boolean","hostname","match","INITIAL_STATE","getItem","local","JSON","parse","Audio","featched","error","rootReducer","combineReducers","action","newAlbum","stringify","newListWithoutAlbum","play","pause","devTools","composeWithDevTools","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab8d09fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loginHeadphones.1df5799c.jpg\";","export const URL: string = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}&scope=${process.env.REACT_APP_SCOPES}`;\n\nexport const getCodeFromUrl = () => {\n  const websiteHref = window.location.href;\n\n  if (websiteHref.includes(\"code\")) {\n    const codeToGetAccess = websiteHref.slice(\n      websiteHref.indexOf(\"=\") + 1,\n      websiteHref.length\n    );\n    return codeToGetAccess;\n  }\n  return \"\";\n};\n\nexport const getOptionsToConnect = () => {\n  const codeToGetAccess = getCodeFromUrl();\n\n  const myHeaders = new Headers();\n  myHeaders.append(\n    \"Authorization\",\n    `Basic ${btoa(\n      process.env.REACT_APP_CLIENT_ID +\n        \":\" +\n        process.env.REACT_APP_CLIENT_SECRET\n    )}`\n  );\n\n  const urlencoded = new URLSearchParams();\n  urlencoded.append(\"grant_type\", \"authorization_code\");\n  urlencoded.append(\"code\", codeToGetAccess);\n  urlencoded.append(\"redirect_uri\", String(process.env.REACT_APP_REDIRECT_URI));\n\n  const fetchOptions: any = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n    redirect: \"follow\",\n  };\n\n  return {\n    headers: myHeaders,\n    urlencoded: urlencoded,\n    fetchOptions: fetchOptions,\n    codeToGetAccess: codeToGetAccess,\n  };\n};\n\nexport const refreshAccessToken = (\n  refresh_token: string,\n  dispatch: Function,\n  setAccessTokens: Function\n) => {\n  const urlencoded = new URLSearchParams();\n  urlencoded.append(\"grant_type\", \"refresh_token\");\n  urlencoded.append(\"refresh_token\", refresh_token);\n\n  const myHeaders = new Headers();\n  myHeaders.append(\n    \"Authorization\",\n    `Basic ${btoa(\n      process.env.REACT_APP_CLIENT_ID +\n        \":\" +\n        process.env.REACT_APP_CLIENT_SECRET\n    )}`\n  );\n\n  fetch(`https://accounts.spotify.com/api/token`, {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n  })\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error();\n    })\n    .then((res) => {\n      dispatch(setAccessTokens(res.access_token, refresh_token));\n    })\n    .catch((err) => console.log(err));\n};\n","import React from \"react\";\nimport \"./LoginButton.scss\";\nimport { URL } from \"../../authorization/config\";\n\nexport const LoginButton: React.SFC = () => (\n  <div className=\"loginpage__buttons\">\n    <a className=\"loginpage__loginBtn\" href={URL}>\n      Zaloguj się do Spotify\n    </a>\n    <a\n      className=\"loginpage__registerBtn\"\n      href=\"https://www.spotify.com/pl/signup/\"\n    >\n      Nie masz konta? Załóż je tutaj.\n    </a>\n  </div>\n);\n","import React from \"react\";\nimport \"./LoginPage.scss\";\nimport loginHeadphones from \"../../images/loginHeadphones.jpg\";\nimport { LoginButton } from \"../../components/LoginButton/LoginButton\";\n\nexport const LoginPage: React.SFC = () => (\n  <div\n    style={{ backgroundImage: `url(${loginHeadphones})` }}\n    className=\"loginpage\"\n  >\n    <LoginButton />\n  </div>\n);\n","import React from \"react\";\nimport \"./Header.scss\";\n\nexport const Header: React.SFC = () => (\n  <header className=\"header\">\n    <h1 className=\"header__title\">\n      Music from <span className=\"header__spotify\">Spotify</span>\n    </h1>\n  </header>\n);\n","import React from \"react\";\nimport \"./SearchInput.scss\";\n\nexport interface SearchInputProps {\n  inputValue: string;\n  setInputValue: Function;\n  isSearchResultsVisible: boolean;\n  showResults: Function;\n  dispatch: Function;\n}\n\nexport const SearchInput: React.SFC<SearchInputProps> = ({\n  inputValue,\n  setInputValue,\n  isSearchResultsVisible,\n  showResults,\n  dispatch,\n}) => (\n  <input\n    className=\"searchsection__input\"\n    placeholder=\"Wyszukaj album / artystę...\"\n    type=\"text\"\n    value={inputValue}\n    onClick={() => {\n      if (!isSearchResultsVisible) dispatch(showResults());\n    }}\n    onChange={(e) => setInputValue(e.target.value)}\n  />\n);\n","import React from \"react\";\nimport \"./SearchButton.scss\";\n\nexport const SearchButton: React.SFC = () => (\n  <button className=\"searchsection__searchbtn\">\n    <i className=\"fas fa-search\"></i>\n  </button>\n);\n","import { ADD_ALBUM_TO_LIST, DELETE_ALBUM_FROM_LIST } from \"../types\";\nimport { AlbumDetails } from \"../storeInterfaces\";\n\nexport const addAlbumToFavourite = (album: AlbumDetails) => ({\n  type: ADD_ALBUM_TO_LIST,\n  albumIMG: album.albumIMG,\n  albumID: album.albumID,\n  albumName: album.albumName,\n  artistName: album.artistName,\n  tracks: album.tracks,\n  spotifyAlbumURL: album.spotifyAlbumURL,\n});\n\nexport const deleteAlbumFromList = (albumID: string) => ({\n  type: DELETE_ALBUM_FROM_LIST,\n  albumID: albumID,\n});\n","export const DATA_FETCHING = \"DATA_FETCHING\";\nexport const DATA_FETCHED = \"DATA_FETCHED\";\nexport const DATA_ERROR = \"DATA_ERROR\";\n\nexport const SET_ACCESS_TOKENS = \"SET_ACCESS_TOKENS\";\n\nexport const SEARCH_ALBUMS = \"SEARCH_ALBUMS\";\n\nexport const ADD_ALBUM_TO_LIST = \"ADD_ALBUM_TO_LIST\";\nexport const DELETE_ALBUM_FROM_LIST = \"DELETE_ALBUM_FROM_LIST\";\n\nexport const SET_AND_PLAY_CURRENT_TRACK = \"SET_AND_PLAY_CURRENT_TRACK\";\nexport const STOP_PLAYING_TRACK = \"STOP_PLAYING_TRACK\";\n\nexport const SHOW_ALBUM_DETAILS = \"SHOW_ALBUM_DETAILS\";\nexport const HIDE_ALBUM_DETAILS = \"HIDE_ALBUM_DETAILS\";\nexport const SET_ALBUM_DETAILS = \"SET_ALBUM_DETAILS\";\n\nexport const SHOW_SEARCH_RESULTS = \"SHOW_SEARCH_RESULTS\";\nexport const HIDE_SEARCH_RESULTS = \"HIDE_SEARCH_RESULTS\";\n","import { SET_ACCESS_TOKENS } from \"../types\";\n\nexport const setAccessTokens = (\n  access_token: string,\n  refresh_token: string\n) => ({\n  type: SET_ACCESS_TOKENS,\n  access_token: access_token,\n  refresh_token: refresh_token,\n});\n","import { DATA_FETCHING, DATA_FETCHED, DATA_ERROR } from \"../types\";\n\nexport const dataFetching = () => ({\n  type: DATA_FETCHING,\n});\n\nexport const dataFetched = () => ({\n  type: DATA_FETCHED,\n});\n\nexport const dataError = (errorMessage: string) => ({\n  type: DATA_ERROR,\n  errorMessage: errorMessage,\n});\n","import React from \"react\";\nimport \"./LoadingPage.scss\";\n\nexport const LoadingPage: React.SFC = () => (\n  <div className=\"loadingPage\">\n    <p className=\"loadingPage__name\">Wczytuje dane...</p>\n  </div>\n);\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Result.scss\";\n\nimport { refreshAccessToken } from \"../../../../authorization/config\";\nimport { GlobalAction } from \"../../../../store/storeInterfaces\";\n\nimport { addAlbumToFavourite } from \"../../../../store/actions/AddToFavouriteActions\";\nimport { setAccessTokens } from \"../../../../store/actions/AuthorizationActions\";\nimport {\n  dataFetching,\n  dataFetched,\n  dataError,\n} from \"../../../../store/actions/FetchDataActions\";\n\nimport { LoadingPage } from \"../../../../pages/LoadingPage/LoadingPage\";\n\ninterface ResultProps {\n  listOfAlbums: [];\n}\n\ninterface Album {\n  artists: { name: string }[];\n  name: string;\n  id: string;\n  images: { url: string }[];\n  external_urls: { spotify: string };\n}\n\nexport const Result: React.SFC<ResultProps> = ({ listOfAlbums }) => {\n  const isFetching = useSelector(\n    (state: { fetchData: GlobalAction }) => state.fetchData.featching\n  );\n  const accessToken = useSelector(\n    (state: { authorization: GlobalAction }) => state.authorization.access_token\n  );\n  const favouriteAlbums = useSelector(\n    (state: { favouriteAlbums: GlobalAction }) =>\n      state.favouriteAlbums.favouriteAlbums\n  );\n  const refresh_token = useSelector(\n    (state: { authorization: GlobalAction }) =>\n      state.authorization.refresh_token\n  );\n  const dispatch = useDispatch();\n\n  const fetchAlbumToFavourite = (album: Album) => {\n    fetch(`https://api.spotify.com/v1/albums/${album.id}/tracks`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        }\n        throw new Error();\n      })\n      .then((res) => {\n        const albumObj = {\n          albumIMG: album.images[1].url,\n          albumID: album.id,\n          albumName: album.name,\n          artistName: album.artists[0].name,\n          tracks: res.items,\n          spotifyAlbumURL: album.external_urls.spotify,\n        };\n        dispatch(dataFetched());\n        dispatch(addAlbumToFavourite(albumObj));\n      })\n      .catch((err) => {\n        dispatch(dataError(err.message));\n        refreshAccessToken(refresh_token, dispatch, setAccessTokens);\n      });\n  };\n\n  const albumsFilter = listOfAlbums.filter(\n    (album: { album_type: string }) => album.album_type === \"album\"\n  );\n\n  const albums = albumsFilter.map((album: Album) => {\n    const isDisabledAddBtn = favouriteAlbums.find(\n      (favouriteAlbum: { albumID: string }) =>\n        album.id === favouriteAlbum.albumID\n    );\n    return (\n      <div key={album.id} className=\"searchsection__result\">\n        <p className=\"searchsection__description\">{album.name}</p>\n        <img\n          className=\"searchsection__albumImage\"\n          src={album.images[1].url}\n          alt=\"Album\"\n        />\n        <p className=\"searchsection__description\">{album.artists[0].name}</p>\n        <button\n          className=\"searchsection__addToFavourite\"\n          disabled={isDisabledAddBtn}\n          onClick={() => {\n            dispatch(dataFetching());\n            fetchAlbumToFavourite(album);\n          }}\n        >\n          {isDisabledAddBtn ? \"Dodano do ulubionych\" : \"Dodaj do ulubionych\"}\n        </button>\n      </div>\n    );\n  });\n\n  return (\n    <>\n      {isFetching ? <LoadingPage /> : null}\n      {albums}\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./SearchResult.scss\";\nimport { Result } from \"./Result/Result\";\n\ninterface SearchResultProps {\n  listOfAlbums: [];\n  hideSearchResults: Function;\n  dispatch: Function;\n  setInputValue: Function;\n  searchAlbums: Function;\n}\n\nexport const SearchResult: React.SFC<SearchResultProps> = ({\n  listOfAlbums,\n  hideSearchResults,\n  dispatch,\n  setInputValue,\n  searchAlbums,\n}) => (\n  <div className=\"searchsection___wrapper\">\n    <div className=\"searchsection__results\">\n      {listOfAlbums.length ? (\n        <Result listOfAlbums={listOfAlbums} />\n      ) : (\n        <p className=\"searchsection__noResults\">Brak wyników wyszukiwania</p>\n      )}\n    </div>\n    <button\n      className=\"searchsection__close\"\n      onClick={() => {\n        dispatch(hideSearchResults());\n        setInputValue(\"\");\n        dispatch(searchAlbums([]));\n      }}\n    >\n      Zamknij wyszukiwarkę\n    </button>\n  </div>\n);\n","import {\n  SEARCH_ALBUMS,\n  SHOW_SEARCH_RESULTS,\n  HIDE_SEARCH_RESULTS,\n} from \"../types\";\n\nexport const searchAlbums = (listOfAlbums: []) => ({\n  type: SEARCH_ALBUMS,\n  listOfAlbums: listOfAlbums,\n});\n\nexport const showSearchResults = () => ({\n  type: SHOW_SEARCH_RESULTS,\n  isSearchResultsVisible: true,\n});\n\nexport const hideSearchResults = () => ({\n  type: HIDE_SEARCH_RESULTS,\n  isSearchResultsVisible: false,\n});\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./SearchSection.scss\";\n\nimport { refreshAccessToken } from \"../../authorization/config\";\nimport { GlobalAction } from \"../../store/storeInterfaces\";\n\nimport { SearchInput } from \"./SearchInput/SearchInput\";\nimport { SearchButton } from \"./SearchButton/SearchButton\";\nimport { SearchResult } from \"./SearchResults/SearchResult\";\nimport { LoadingPage } from \"../../pages/LoadingPage/LoadingPage\";\n\nimport { setAccessTokens } from \"../../store/actions/AuthorizationActions\";\nimport {\n  searchAlbums,\n  showSearchResults,\n  hideSearchResults,\n} from \"../../store/actions/SearchingActions\";\nimport {\n  dataFetching,\n  dataFetched,\n  dataError,\n} from \"../../store/actions/FetchDataActions\";\n\nexport const SearchSection: React.SFC = () => {\n  const isFetching = useSelector(\n    (state: { fetchData: GlobalAction }) => state.fetchData.featching\n  );\n  const isSearchResultsVisible = useSelector(\n    (state: { searching: GlobalAction }) =>\n      state.searching.isSearchResultsVisible\n  );\n  const accessToken = useSelector(\n    (state: { authorization: GlobalAction }) => state.authorization.access_token\n  );\n  const refresh_token = useSelector(\n    (state: { authorization: GlobalAction }) =>\n      state.authorization.refresh_token\n  );\n  const listOfAlbums = useSelector(\n    (state: { searching: GlobalAction }) => state.searching.listOfAlbums\n  );\n  const [inputValue, setInputValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (inputValue !== \"\") {\n      dispatch(dataFetching());\n      fetch(`https://api.spotify.com/v1/search?q=${inputValue}&type=album`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then((res: Response) => {\n          if (res.status === 200) return res.json();\n          throw new Error();\n        })\n        .then((res) => {\n          dispatch(dataFetched());\n          dispatch(searchAlbums(res.albums.items));\n        })\n        .catch((err) => {\n          dispatch(dataError(err.message));\n          refreshAccessToken(refresh_token, dispatch, setAccessTokens);\n        });\n    } else {\n      dispatch(searchAlbums([]));\n    }\n  };\n\n  return (\n    <section className=\"searchsection\">\n      {isFetching ? <LoadingPage /> : null}\n      <form\n        className=\"searchsection__form\"\n        onSubmit={(e) => {\n          if (!isSearchResultsVisible) dispatch(showSearchResults());\n          handleSubmit(e);\n        }}\n      >\n        <div className=\"searchsection__relative\">\n          <SearchInput\n            inputValue={inputValue}\n            setInputValue={setInputValue}\n            isSearchResultsVisible={isSearchResultsVisible}\n            showResults={showSearchResults}\n            dispatch={dispatch}\n          />\n          <SearchButton />\n        </div>\n      </form>\n\n      <div className=\"searchsection__resultsPosition\">\n        {isSearchResultsVisible ? (\n          <SearchResult\n            dispatch={dispatch}\n            hideSearchResults={hideSearchResults}\n            listOfAlbums={listOfAlbums}\n            setInputValue={setInputValue}\n            searchAlbums={searchAlbums}\n          />\n        ) : null}\n      </div>\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./Tracks.scss\";\nimport { Track } from \"../../../store/storeInterfaces\";\n\nexport interface TracksProps {\n  track: Track;\n  isTrackPlaying: boolean;\n  stopBtnClasses: string;\n  trackClasses: string;\n  dispatch: Function;\n  stopMusic: Function;\n  setAndPlayCurrentTrack: Function;\n}\n\nexport const Tracks: React.SFC<TracksProps> = ({\n  track,\n  isTrackPlaying,\n  stopBtnClasses,\n  trackClasses,\n  dispatch,\n  stopMusic,\n  setAndPlayCurrentTrack,\n}) => (\n  <div className=\"albumssection__trackWrapper\">\n    {track.preview_url ? (\n      isTrackPlaying ? (\n        <button\n          className={stopBtnClasses}\n          onClick={() => {\n            dispatch(stopMusic());\n          }}\n        >\n          Stop\n        </button>\n      ) : (\n        <button\n          className=\"albumssection__detailsTrackButton\"\n          onClick={() => {\n            dispatch(setAndPlayCurrentTrack(track.preview_url));\n          }}\n        >\n          Play\n        </button>\n      )\n    ) : (\n      <button className=\"albumssection__detailsTrackButton\" disabled>\n        Play\n      </button>\n    )}\n\n    <p className={trackClasses}>\n      {track.track_number}. {track.name}\n    </p>\n  </div>\n);\n","import { SET_AND_PLAY_CURRENT_TRACK, STOP_PLAYING_TRACK } from \"../types\";\n\nexport const setAndPlayCurrentTrack = (trackURL: string) => {\n  return {\n    type: SET_AND_PLAY_CURRENT_TRACK,\n    trackURL: trackURL,\n  };\n};\n\nexport const stopMusic = () => {\n  return {\n    type: STOP_PLAYING_TRACK,\n  };\n};\n","import React from \"react\";\nimport \"./AlbumDetails.scss\";\nimport { Tracks } from \"../Tracks/Tracks\";\nimport {\n  setAndPlayCurrentTrack,\n  stopMusic,\n} from \"../../../store/actions/PlayerActions\";\nimport { Track } from \"../../../store/storeInterfaces\";\n\nexport interface AlbumDetailsProps {\n  albumDetails: {\n    albumIMG: string;\n    artistName: string;\n    albumName: string;\n    spotifyAlbumURL: string;\n    tracks: [];\n    albumID: string;\n  };\n  isPlaying: boolean;\n  currentTrack: string;\n  dispatch: Function;\n  hideAlbumDetails: Function;\n  deleteAlbumFromList: Function;\n}\n\nexport const AlbumDetails: React.SFC<AlbumDetailsProps> = ({\n  albumDetails,\n  isPlaying,\n  currentTrack,\n  dispatch,\n  hideAlbumDetails,\n  deleteAlbumFromList,\n}) => {\n  const tracksListCurrentAlbum = albumDetails.tracks.map((track: Track) => {\n    const isTrackPlaying = isPlaying && currentTrack === track.preview_url;\n    const trackClasses = isTrackPlaying\n      ? \"albumssection__detailsTrackName albumssection__detailsTrackName--green\"\n      : \"albumssection__detailsTrackName\";\n    const stopBtnClasses = isTrackPlaying\n      ? \"albumssection__detailsTrackButton albumssection__detailsTrackButton--green\"\n      : \"albumssection__detailsTrackButton\";\n    return (\n      <Tracks\n        key={track.id}\n        track={track}\n        isTrackPlaying={isTrackPlaying}\n        stopBtnClasses={stopBtnClasses}\n        trackClasses={trackClasses}\n        dispatch={dispatch}\n        stopMusic={stopMusic}\n        setAndPlayCurrentTrack={setAndPlayCurrentTrack}\n      />\n    );\n  });\n\n  return (\n    <div className=\"albumssection__detailsAlbum\">\n      <div className=\"albumssection__albumInfoWrapper\">\n        <img\n          className=\"albumssection__detailsImage\"\n          src={albumDetails.albumIMG}\n          alt=\"Album\"\n        />\n        <div className=\"albumssection__detailsNameWrapper\">\n          <h1 className=\"albumssection__detailsArtistName\">\n            {albumDetails.artistName}\n          </h1>\n          <h2 className=\"albumssection__detailsAlbumName\">\n            {albumDetails.albumName}\n          </h2>\n        </div>\n        <div className=\"albumssection__detailsButtonsWrapper\">\n          <a\n            className=\"albumssection__detailsFullAlbumSpotify\"\n            href={albumDetails.spotifyAlbumURL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Pełny album znajdziesz tutaj\n          </a>\n          <button\n            className=\"albumssection__detailsDeleteAlbum\"\n            onClick={() => {\n              dispatch(hideAlbumDetails());\n              dispatch(deleteAlbumFromList(albumDetails.albumID));\n            }}\n          >\n            Usuń album z ulubionych\n          </button>\n        </div>\n      </div>\n      <div className=\"albumssection__tracksWrapper\">\n        {tracksListCurrentAlbum}\n      </div>\n      <button\n        className=\"albumssection__detailsClose\"\n        onClick={() => dispatch(hideAlbumDetails())}\n      >\n        <i className=\"fas fa-times\"></i>\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Album.scss\";\nimport { AlbumDetails } from \"../../../store/storeInterfaces\";\n\nexport interface AlbumProps {\n  album: AlbumDetails;\n  dispatch: Function;\n  showAlbumDetails: Function;\n  setAlbumDetails: Function;\n}\n\nexport const Album: React.SFC<AlbumProps> = ({\n  album,\n  dispatch,\n  showAlbumDetails,\n  setAlbumDetails,\n}) => (\n  <div className=\"albumssection__wrapper\">\n    <img src={album.albumIMG} alt=\"Album\" className=\"albumssection__image\" />\n    <div\n      className=\"albumssection__hoverDiv\"\n      onClick={() => {\n        dispatch(showAlbumDetails());\n        dispatch(\n          setAlbumDetails({\n            albumIMG: album.albumIMG,\n            albumID: album.albumID,\n            albumName: album.albumName,\n            artistName: album.artistName,\n            tracks: album.tracks,\n            spotifyAlbumURL: album.spotifyAlbumURL,\n          })\n        );\n      }}\n    >\n      <p className=\"albumssection__nameHover\">{album.artistName}</p>\n      <p className=\"albumssection__nameHover\">{album.albumName}</p>\n    </div>\n  </div>\n);\n","import {\n  SHOW_ALBUM_DETAILS,\n  HIDE_ALBUM_DETAILS,\n  SET_ALBUM_DETAILS,\n} from \"../types\";\nimport { AlbumDetails } from \"../storeInterfaces\";\n\nexport const showAlbumDetails = () => ({\n  type: SHOW_ALBUM_DETAILS,\n  isAlbumDetailsVisible: true,\n});\n\nexport const hideAlbumDetails = () => ({\n  type: HIDE_ALBUM_DETAILS,\n  isAlbumDetailsVisible: false,\n});\n\nexport const setAlbumDetails = (albumDetails: AlbumDetails) => ({\n  type: SET_ALBUM_DETAILS,\n  albumDetails: albumDetails,\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./AlbumsSection.scss\";\n\nimport { AlbumDetails } from \"./AlbumDetails/AlbumDetails\";\nimport { Album } from \"./Album/Album\";\n\nimport {\n  GlobalAction,\n  AlbumDetails as AlbumDetailsInterface,\n} from \"../../store/storeInterfaces\";\n\nimport { deleteAlbumFromList } from \"../../store/actions/AddToFavouriteActions\";\nimport {\n  hideAlbumDetails,\n  showAlbumDetails,\n  setAlbumDetails,\n} from \"../../store/actions/AlbumDetailsActions\";\n\nexport const AlbumsSection: React.SFC = () => {\n  const favouriteAlbums = useSelector(\n    (state: { favouriteAlbums: GlobalAction }) =>\n      state.favouriteAlbums.favouriteAlbums\n  );\n  const currentTrack = useSelector(\n    (state: { player: GlobalAction }) => state.player.trackURL\n  );\n  const isPlaying = useSelector(\n    (state: { player: GlobalAction }) => state.player.isPlaying\n  );\n  const albumDetails = useSelector(\n    (state: { albumDetails: GlobalAction }) => state.albumDetails.albumDetails\n  );\n  const albumDetailsVisible = useSelector(\n    (state: { albumDetails: GlobalAction }) =>\n      state.albumDetails.isAlbumDetailsVisible\n  );\n  const dispatch = useDispatch();\n\n  const albums = favouriteAlbums.map((album: AlbumDetailsInterface) => (\n    <Album\n      key={album.albumID}\n      album={album}\n      dispatch={dispatch}\n      showAlbumDetails={showAlbumDetails}\n      setAlbumDetails={setAlbumDetails}\n    />\n  ));\n\n  return (\n    <section className=\"albumssection\">\n      {albums.length ? (\n        albums.reverse()\n      ) : (\n        <div className=\"albumssection__noResults\">\n          <p className=\"albumssection__noResultName\">Brak albumów</p>\n        </div>\n      )}\n\n      {albumDetailsVisible ? (\n        <AlbumDetails\n          albumDetails={albumDetails}\n          isPlaying={isPlaying}\n          currentTrack={currentTrack}\n          dispatch={dispatch}\n          hideAlbumDetails={hideAlbumDetails}\n          deleteAlbumFromList={deleteAlbumFromList}\n        />\n      ) : null}\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./Main.scss\";\nimport { SearchSection } from \"../SearchSection/SearchSection\";\nimport { AlbumsSection } from \"../AlbumsSection/AlbumsSection\";\n\nexport const Main: React.SFC = () => (\n  <main className=\"main\">\n    <SearchSection />\n    <AlbumsSection />\n  </main>\n);\n","import React from \"react\";\nimport \"./Footer.scss\";\n\nexport const Footer: React.SFC = () => (\n  <footer className=\"footer\">\n    <p className=\"footer__author\">Projekt i realizacja Marcin Hercog</p>\n  </footer>\n);\n","import React from \"react\";\nimport \"./WebsitePage.scss\";\nimport { Header } from \"../../components/Header/Header\";\nimport { Main } from \"../../components/Main/Main\";\nimport { Footer } from \"../../components/Footer/Footer\";\n\nexport const WebsitePage: React.SFC = () => (\n  <div className=\"websitepage\">\n    <Header />\n    <Main />\n    <Footer />\n  </div>\n);\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.scss\";\n\nimport { LoginPage } from \"./pages/LoginPage/LoginPage\";\nimport { WebsitePage } from \"./pages/WebsitePage/WebsitePage\";\nimport { LoadingPage } from \"./pages/LoadingPage/LoadingPage\";\n\nimport { getOptionsToConnect } from \"./authorization/config\";\nimport { GlobalAction } from \"./store/storeInterfaces\";\n\nimport { showSearchResults } from \"./store/actions/SearchingActions\";\nimport { setAccessTokens } from \"./store/actions/AuthorizationActions\";\nimport {\n  dataFetching,\n  dataFetched,\n  dataError,\n} from \"./store/actions/FetchDataActions\";\n\nexport const App = () => {\n  const connectOptions = getOptionsToConnect();\n  const { codeToGetAccess, fetchOptions } = connectOptions;\n  const accessToken = useSelector(\n    (state: { authorization: GlobalAction }) => state.authorization.access_token\n  );\n  const isFetching = useSelector(\n    (state: { fetchData: GlobalAction }) => state.fetchData.featching\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (codeToGetAccess && !accessToken) {\n      dispatch(dataFetching());\n      fetch(`https://accounts.spotify.com/api/token`, fetchOptions)\n        .then((res: Response) => {\n          if (res.status === 200) return res.json();\n          throw new Error();\n        })\n        .then((res: GlobalAction) => {\n          dispatch(dataFetched());\n          dispatch(setAccessTokens(res.access_token, res.refresh_token));\n        })\n        .catch((err: Error) => {\n          dispatch(dataError(err.message));\n          console.log(err);\n        });\n    }\n\n    if (!codeToGetAccess) {\n      localStorage.setItem(\"access_token\", \"\");\n      localStorage.setItem(\"refresh_token\", \"\");\n    }\n\n    if (window.innerWidth >= 1024) {\n      dispatch(showSearchResults());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {isFetching ? <LoadingPage /> : null}\n      {accessToken ? <WebsitePage /> : <LoginPage />}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_ACCESS_TOKENS } from \"../types\";\nimport { getCodeFromUrl } from \"../../authorization/config\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst accessLocal = getCodeFromUrl()\n  ? String(localStorage.getItem(\"access_token\"))\n  : \"\";\nconst refreshLocal = localStorage.getItem(\"refresh_token\")\n  ? String(localStorage.getItem(\"refresh_token\"))\n  : \"\";\n\nconst INITIAL_STATE: GlobalState = {\n  access_token: accessLocal,\n  refresh_token: refreshLocal,\n};\n\nexport const authorizationReducers = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SET_ACCESS_TOKENS:\n      localStorage.setItem(\"access_token\", action.access_token);\n      localStorage.setItem(\"refresh_token\", action.refresh_token);\n      return {\n        ...state,\n        access_token: action.access_token,\n        refresh_token: action.refresh_token,\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  SEARCH_ALBUMS,\n  SHOW_SEARCH_RESULTS,\n  HIDE_SEARCH_RESULTS,\n} from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst INITIAL_STATE: GlobalState = {\n  listOfAlbums: [],\n  isSearchResultsVisible: false,\n};\n\nexport const searchingReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SHOW_SEARCH_RESULTS:\n      return {\n        ...state,\n        isSearchResultsVisible: action.isSearchResultsVisible,\n      };\n\n    case HIDE_SEARCH_RESULTS:\n      return {\n        ...state,\n        isSearchResultsVisible: action.isSearchResultsVisible,\n      };\n\n    case SEARCH_ALBUMS:\n      return {\n        ...state,\n        listOfAlbums: action.listOfAlbums,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { ADD_ALBUM_TO_LIST, DELETE_ALBUM_FROM_LIST } from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst local = localStorage.getItem(\"favouriteAlbums\")\n  ? localStorage.getItem(\"favouriteAlbums\")\n  : \"\";\n\nconst INITIAL_STATE: GlobalState = {\n  favouriteAlbums: local ? JSON.parse(local) : [],\n};\n\nexport const addFavouriteAlbumReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case ADD_ALBUM_TO_LIST:\n      const newAlbum = {\n        albumIMG: action.albumIMG,\n        albumID: action.albumID,\n        albumName: action.albumName,\n        artistName: action.artistName,\n        tracks: action.tracks,\n        spotifyAlbumURL: action.spotifyAlbumURL,\n      };\n      localStorage.setItem(\n        \"favouriteAlbums\",\n        JSON.stringify([...state.favouriteAlbums, newAlbum])\n      );\n      return {\n        ...state,\n        favouriteAlbums: [...state.favouriteAlbums, newAlbum],\n      };\n\n    case DELETE_ALBUM_FROM_LIST:\n      const newListWithoutAlbum = state.favouriteAlbums.filter(\n        (album: { albumID: string }) => album.albumID !== action.albumID\n      );\n      localStorage.setItem(\n        \"favouriteAlbums\",\n        JSON.stringify(newListWithoutAlbum)\n      );\n      return {\n        ...state,\n        favouriteAlbums: newListWithoutAlbum,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { SET_AND_PLAY_CURRENT_TRACK, STOP_PLAYING_TRACK } from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst player = new Audio();\n\nconst INITIAL_STATE: GlobalState = {\n  trackURL: \"\",\n  isPlaying: false,\n};\n\nexport const currentTrackReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SET_AND_PLAY_CURRENT_TRACK:\n      player.src = action.trackURL;\n      player.play();\n      return {\n        ...state,\n        trackURL: action.trackURL,\n        isPlaying: true,\n      };\n\n    case STOP_PLAYING_TRACK:\n      player.pause();\n      return {\n        ...state,\n        trackURL: \"\",\n        isPlaying: false,\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  SHOW_ALBUM_DETAILS,\n  HIDE_ALBUM_DETAILS,\n  SET_ALBUM_DETAILS,\n} from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst INITIAL_STATE: GlobalState = {\n  isAlbumDetailsVisible: false,\n  albumDetails: {\n    albumIMG: \"\",\n    albumID: \"\",\n    albumName: \"\",\n    artistName: \"\",\n    tracks: [],\n    spotifyAlbumURL: \"\",\n  },\n};\n\nexport const albumDetailsReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SHOW_ALBUM_DETAILS:\n      return {\n        ...state,\n        isAlbumDetailsVisible: action.isAlbumDetailsVisible,\n      };\n\n    case HIDE_ALBUM_DETAILS:\n      return {\n        ...state,\n        isAlbumDetailsVisible: action.isAlbumDetailsVisible,\n      };\n\n    case SET_ALBUM_DETAILS:\n      return {\n        ...state,\n        albumDetails: action.albumDetails,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { DATA_FETCHING, DATA_FETCHED, DATA_ERROR } from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst INITIAL_STATE: GlobalState = {\n  featching: false,\n  featched: false,\n  error: false,\n  errorMessage: \"\",\n};\n\nexport const dataFetchReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case DATA_FETCHING:\n      return {\n        ...state,\n        featching: true,\n        featched: false,\n        error: false,\n        errorMessage: \"\",\n      };\n\n    case DATA_FETCHED:\n      return {\n        ...state,\n        featching: false,\n        featched: true,\n        error: false,\n        errorMessage: \"\",\n      };\n\n    case DATA_ERROR:\n      return {\n        ...state,\n        featching: false,\n        featched: false,\n        error: true,\n        errorMessage: action.errorMessage,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { authorizationReducers } from \"./AuthorizationReducers\";\nimport { searchingReducer } from \"./SearchingReducers\";\nimport { addFavouriteAlbumReducer } from \"./AddToFavouriteReducers\";\nimport { currentTrackReducer } from \"./PlayerReducers\";\nimport { albumDetailsReducer } from \"./AlbumDetailsReducers\";\nimport { dataFetchReducer } from \"./FetchDataReducers\";\nimport { combineReducers } from \"redux\";\n\nexport const rootReducer = combineReducers({\n  authorization: authorizationReducers,\n  searching: searchingReducer,\n  favouriteAlbums: addFavouriteAlbumReducer,\n  player: currentTrackReducer,\n  albumDetails: albumDetailsReducer,\n  fetchData: dataFetchReducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers\";\n\nconst devTools = composeWithDevTools(applyMiddleware(thunk));\n\nexport const store = createStore(rootReducer, devTools);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}