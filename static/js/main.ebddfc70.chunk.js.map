{"version":3,"sources":["images/loginHeadphones.jpg","authorization/config.ts","components/LoginButton/LoginButton.tsx","pages/LoginPage/LoginPage.tsx","components/Header/Header.tsx","components/SearchSection/SearchInput/SearchInput.tsx","components/SearchSection/SearchButton/SearchButton.tsx","store/actions/AddToFavouriteActions.ts","store/types/index.ts","store/actions/FetchDataActions.ts","pages/LoadingPage/LoadingPage.tsx","components/SearchSection/SearchResults/Result/Result.tsx","store/actions/SearchingActions.ts","components/SearchSection/SearchResults/SearchResult.tsx","store/actions/AuthorizationActions.ts","components/SearchSection/SearchSection.tsx","components/AlbumsSection/AlbumDetails/AlbumDetails.tsx","components/AlbumsSection/Album/Album.tsx","components/AlbumsSection/Tracks/Tracks.tsx","store/actions/PlayerActions.ts","store/actions/AlbumDetailsActions.ts","components/AlbumsSection/AlbumsSection.tsx","components/Main/Main.tsx","components/Footer/Footer.tsx","pages/WebsitePage/WebsitePage.tsx","App.tsx","serviceWorker.ts","store/reducers/AuthorizationReducers.ts","store/reducers/SearchingReducers.ts","store/reducers/AddToFavouriteReducers.ts","store/reducers/PlayerReducers.ts","store/reducers/AlbumDetailsReducers.ts","store/reducers/FetchDataReducers.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","URL","process","getCodeFromUrl","websiteHref","window","location","href","includes","slice","indexOf","length","LoginButton","className","LoginPage","style","backgroundImage","loginHeadphones","Header","SearchInput","value","setValue","showResults","dispatch","placeholder","type","onClick","onChange","e","target","SearchButton","deleteAlbumFromList","albumID","dataError","errorMessage","LoadingPage","Result","listOfAlbums","isFetching","useSelector","state","fetchData","featching","accessToken","authorization","access_token","useDispatch","favouriteAlbums","albums","filter","album","album_type","map","isDisabled","find","favouriteAlbum","id","key","name","src","images","url","alt","artists","disabled","fetch","headers","Authorization","then","res","status","json","Error","albumObj","albumIMG","albumName","artistName","tracks","items","spotifyAlbumURL","external_urls","spotify","addAlbumToFavourite","catch","err","message","console","log","searchAlbums","showSearchResults","isSearchResultsVisible","SearchResult","searching","setAccessTokens","refresh_token","SearchSection","useState","inputValue","setInputValue","handleSubmit","preventDefault","urlencoded","URLSearchParams","append","myHeaders","Headers","btoa","method","body","refreshAccessToken","onSubmit","AlbumDetails","albumDetails","tracksListCurrentAlbum","hideAlbumDetails","rel","Album","showAlbumDetails","setAlbumDetails","Tracks","track","answer","classesBtn","classes","stopMusic","setAndPlayCurrentTrack","preview_url","track_number","trackURL","isAlbumDetailsVisible","AlbumsSection","currentTrack","player","isPlaying","albumDetailsVisible","reverse","Main","Footer","WebsitePage","App","connectOptions","codeToGetAccess","String","fetchOptions","redirect","getOptionsToConnect","useEffect","localStorage","setItem","innerWidth","Boolean","hostname","match","INITIAL_STATE","getItem","local","JSON","parse","Audio","featched","error","rootReducer","combineReducers","action","newAlbum","stringify","newListWithoutAlbum","play","pause","devTools","composeWithDevTools","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebddfc70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loginHeadphones.1df5799c.jpg\";","export const URL: string = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}&scope=${process.env.REACT_APP_SCOPES}`;\n\nexport const getCodeFromUrl = () => {\n  const websiteHref = window.location.href;\n\n  if (websiteHref.includes(\"code\")) {\n    const codeToGetAccess = websiteHref.slice(\n      websiteHref.indexOf(\"=\") + 1,\n      websiteHref.length\n    );\n    return codeToGetAccess;\n  }\n  return \"\";\n};\n\nexport const getOptionsToConnect = () => {\n  const codeToGetAccess = getCodeFromUrl();\n\n  const myHeaders = new Headers();\n  myHeaders.append(\n    \"Authorization\",\n    `Basic ${btoa(\n      process.env.REACT_APP_CLIENT_ID +\n        \":\" +\n        process.env.REACT_APP_CLIENT_SECRET\n    )}`\n  );\n\n  const urlencoded = new URLSearchParams();\n  urlencoded.append(\"grant_type\", \"authorization_code\");\n  urlencoded.append(\"code\", codeToGetAccess);\n  urlencoded.append(\"redirect_uri\", String(process.env.REACT_APP_REDIRECT_URI));\n\n  const fetchOptions: any = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n    redirect: \"follow\",\n  };\n\n  return {\n    headers: myHeaders,\n    urlencoded: urlencoded,\n    fetchOptions: fetchOptions,\n    codeToGetAccess: codeToGetAccess,\n  };\n};\n\nexport const refreshAccessToken = (\n  refresh_token: string,\n  dispatch: Function,\n  setAccessTokens: Function,\n  searchAlbums: Function\n) => {\n  const urlencoded = new URLSearchParams();\n  urlencoded.append(\"grant_type\", \"refresh_token\");\n  urlencoded.append(\"refresh_token\", refresh_token);\n\n  const myHeaders = new Headers();\n  myHeaders.append(\n    \"Authorization\",\n    `Basic ${btoa(\n      process.env.REACT_APP_CLIENT_ID +\n        \":\" +\n        process.env.REACT_APP_CLIENT_SECRET\n    )}`\n  );\n\n  fetch(`https://accounts.spotify.com/api/token`, {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n  })\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    })\n    .then((res) => {\n      dispatch(setAccessTokens(res.access_token, refresh_token));\n      dispatch(searchAlbums([]));\n    });\n  return;\n};\n","import React from \"react\";\nimport \"./LoginButton.scss\";\nimport { URL } from \"../../authorization/config\";\n\nexport const LoginButton: React.SFC = () => (\n  <div className=\"loginpage__buttons\">\n    <a className=\"loginpage__loginBtn\" href={URL}>\n      Zaloguj się do Spotify\n    </a>\n    <a\n      className=\"loginpage__registerBtn\"\n      href=\"https://www.spotify.com/pl/signup/\"\n    >\n      Nie masz konta? Załóż je tutaj.\n    </a>\n  </div>\n);\n","import React from \"react\";\nimport \"./LoginPage.scss\";\nimport loginHeadphones from \"../../images/loginHeadphones.jpg\";\nimport { LoginButton } from \"../../components/LoginButton/LoginButton\";\n\nexport interface LoginPageProps {}\n\nexport const LoginPage: React.SFC<LoginPageProps> = () => (\n  <div\n    style={{ backgroundImage: `url(${loginHeadphones})` }}\n    className=\"loginpage\"\n  >\n    <LoginButton />\n  </div>\n);\n","import React from \"react\";\nimport \"./Header.scss\";\n\nexport const Header: React.SFC = () => (\n  <header className=\"header\">\n    <h1 className=\"header__title\">\n      Music from <span className=\"header__spotify\">Spotify</span>\n    </h1>\n  </header>\n);\n","import React from \"react\";\nimport \"./SearchInput.scss\";\n\nexport interface SearchInputProps {\n  value: string;\n  setValue: Function;\n  showResults: Function;\n  dispatch: Function;\n}\n\nexport const SearchInput: React.SFC<SearchInputProps> = ({\n  value,\n  setValue,\n  showResults,\n  dispatch,\n}) => (\n  <input\n    className=\"searchsection__input\"\n    placeholder=\"Wyszukaj...\"\n    type=\"text\"\n    value={value}\n    onClick={() => {\n      dispatch(showResults());\n    }}\n    onChange={(e) => setValue(e.target.value)}\n  />\n);\n","import React from \"react\";\nimport \"./SearchButton.scss\";\n\nexport const SearchButton: React.SFC = () => (\n  <button className=\"searchsection__searchbtn\">\n    <i className=\"fas fa-search\"></i>\n  </button>\n);\n","import { ADD_ALBUM_TO_LIST, DELETE_ALBUM_FROM_LIST } from \"../types\";\nimport { AlbumDetails } from \"../storeInterfaces\";\n\nexport const addAlbumToFavourite = (album: AlbumDetails) => ({\n  type: ADD_ALBUM_TO_LIST,\n  albumIMG: album.albumIMG,\n  albumID: album.albumID,\n  albumName: album.albumName,\n  artistName: album.artistName,\n  tracks: album.tracks,\n  spotifyAlbumURL: album.spotifyAlbumURL,\n});\n\nexport const deleteAlbumFromList = (albumID: string) => ({\n  type: DELETE_ALBUM_FROM_LIST,\n  albumID: albumID,\n});\n","export const DATA_FETCHING = \"DATA_FETCHING\";\nexport const DATA_FETCHED = \"DATA_FETCHED\";\nexport const DATA_ERROR = \"DATA_ERROR\";\n\nexport const SET_ACCESS_TOKENS = \"SET_ACCESS_TOKENS\";\n\nexport const SEARCH_ALBUMS = \"SEARCH_ALBUMS\";\n\nexport const ADD_ALBUM_TO_LIST = \"ADD_ALBUM_TO_LIST\";\nexport const DELETE_ALBUM_FROM_LIST = \"DELETE_ALBUM_FROM_LIST\";\n\nexport const SET_AND_PLAY_CURRENT_TRACK = \"SET_AND_PLAY_CURRENT_TRACK\";\nexport const STOP_PLAYING_TRACK = \"STOP_PLAYING_TRACK\";\n\nexport const SHOW_ALBUM_DETAILS = \"SHOW_ALBUM_DETAILS\";\nexport const HIDE_ALBUM_DETAILS = \"HIDE_ALBUM_DETAILS\";\nexport const SET_ALBUM_DETAILS = \"SET_ALBUM_DETAILS\";\n\nexport const SHOW_SEARCH_RESULTS = \"SHOW_SEARCH_RESULTS\";\nexport const HIDE_SEARCH_RESULTS = \"HIDE_SEARCH_RESULTS\";\n","import { DATA_FETCHING, DATA_FETCHED, DATA_ERROR } from \"../types\";\n\nexport const dataFetching = () => ({\n  type: DATA_FETCHING,\n});\n\nexport const dataFetched = () => ({\n  type: DATA_FETCHED,\n});\n\nexport const dataError = (errorMessage: string) => ({\n  type: DATA_ERROR,\n  errorMessage: errorMessage,\n});\n","import React from \"react\";\nimport \"./LoadingPage.scss\";\n\nexport const LoadingPage: React.SFC = () => (\n  <div className=\"loadingPage\">\n    <p className=\"loadingPage__name\">Wczytuje dane...</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./Result.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addAlbumToFavourite } from \"../../../../store/actions/AddToFavouriteActions\";\nimport {\n  dataFetching,\n  dataFetched,\n  dataError,\n} from \"../../../../store/actions/FetchDataActions\";\nimport { LoadingPage } from \"../../../../pages/LoadingPage/LoadingPage\";\nimport { GlobalAction } from \"../../../../store/storeInterfaces\";\n\nexport interface ResultProps {\n  listOfAlbums: [];\n}\n\ninterface Album {\n  artists: { name: string }[];\n  name: string;\n  id: string;\n  images: { url: string }[];\n  external_urls: { spotify: string };\n}\n\nexport const Result: React.SFC<ResultProps> = ({ listOfAlbums }) => {\n  const isFetching = useSelector(\n    (state: { fetchData: GlobalAction }) => state.fetchData.featching\n  );\n  const accessToken = useSelector(\n    (state: { authorization: GlobalAction }) => state.authorization.access_token\n  );\n  const dispatch = useDispatch();\n  const favouriteAlbums = useSelector(\n    (state: { favouriteAlbums: GlobalAction }) =>\n      state.favouriteAlbums.favouriteAlbums\n  );\n  const albumsFilter = listOfAlbums.filter(\n    (album: { album_type: string }) => album.album_type === \"album\"\n  );\n\n  const albums = albumsFilter.map((album: Album) => {\n    const isDisabled = favouriteAlbums.find(\n      (favouriteAlbum: { albumID: string }) => {\n        if (album.id === favouriteAlbum.albumID) return true;\n        return false;\n      }\n    );\n    return (\n      <div key={album.id} className=\"searchsection__result\">\n        <p className=\"searchsection__description\">{album.name}</p>\n        <img\n          className=\"searchsection__albumImage\"\n          src={album.images[2].url}\n          alt=\"Album\"\n        />\n        <p className=\"searchsection__description\">{album.artists[0].name}</p>\n        <button\n          className=\"searchsection__addToFavourite\"\n          disabled={isDisabled}\n          onClick={() => {\n            dispatch(dataFetching());\n            fetch(`https://api.spotify.com/v1/albums/${album.id}/tracks`, {\n              headers: {\n                Authorization: `Bearer ${accessToken}`,\n              },\n            })\n              .then((res) => {\n                if (res.status === 200) {\n                  return res.json();\n                }\n                throw new Error();\n              })\n              .then((res) => {\n                const albumObj = {\n                  albumIMG: album.images[1].url,\n                  albumID: album.id,\n                  albumName: album.name,\n                  artistName: album.artists[0].name,\n                  tracks: res.items,\n                  spotifyAlbumURL: album.external_urls.spotify,\n                };\n                dispatch(dataFetched());\n                dispatch(addAlbumToFavourite(albumObj));\n              })\n              .catch((err) => {\n                dispatch(dataError(err.message));\n                console.log(err);\n              });\n          }}\n        >\n          {isDisabled ? \"Dodano do ulubionych\" : \"Dodaj do ulubionych\"}\n        </button>\n      </div>\n    );\n  });\n\n  return (\n    <>\n      {isFetching ? <LoadingPage /> : null}\n      {albums}\n    </>\n  );\n};\n","import {\n  SEARCH_ALBUMS,\n  SHOW_SEARCH_RESULTS,\n  HIDE_SEARCH_RESULTS,\n} from \"../types\";\n\nexport const searchAlbums = (listOfAlbums: []) => ({\n  type: SEARCH_ALBUMS,\n  listOfAlbums: listOfAlbums,\n});\n\nexport const showSearchResults = () => ({\n  type: SHOW_SEARCH_RESULTS,\n  isSearchResultsVisible: true,\n});\n\nexport const hideSearchResults = () => ({\n  type: HIDE_SEARCH_RESULTS,\n  isSearchResultsVisible: false,\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./SearchResult.scss\";\nimport { Result } from \"./Result/Result\";\nimport { hideSearchResults } from \"../../../store/actions/SearchingActions\";\nimport { GlobalAction } from \"../../../store/storeInterfaces\";\n\nexport interface SearchResultProps {}\n\nexport const SearchResult: React.SFC<SearchResultProps> = () => {\n  const listOfAlbums = useSelector(\n    (state: { searching: GlobalAction }) => state.searching.listOfAlbums\n  );\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"searchsection___wrapper\">\n      <div className=\"searchsection__results\">\n        {listOfAlbums.length ? (\n          <Result listOfAlbums={listOfAlbums} />\n        ) : (\n          <p className=\"searchsection__noResults\">Brak danych</p>\n        )}\n      </div>\n      <button\n        className=\"searchsection__close\"\n        onClick={() => dispatch(hideSearchResults())}\n      >\n        Zamknij wyszukiwarkę\n      </button>\n    </div>\n  );\n};\n","import { SET_ACCESS_TOKENS } from \"../types\";\n\nexport const setAccessTokens = (\n  access_token: string,\n  refresh_token: string\n) => ({\n  type: SET_ACCESS_TOKENS,\n  access_token: access_token,\n  refresh_token: refresh_token,\n});\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { refreshAccessToken } from \"../../authorization/config\";\nimport \"./SearchSection.scss\";\nimport { SearchInput } from \"./SearchInput/SearchInput\";\nimport { SearchButton } from \"./SearchButton/SearchButton\";\nimport { SearchResult } from \"./SearchResults/SearchResult\";\nimport { LoadingPage } from \"../../pages/LoadingPage/LoadingPage\";\nimport { GlobalAction } from \"../../store/storeInterfaces\";\nimport { setAccessTokens } from \"../../store/actions/AuthorizationActions\";\nimport {\n  searchAlbums,\n  showSearchResults,\n} from \"../../store/actions/SearchingActions\";\nimport {\n  dataFetching,\n  dataFetched,\n  dataError,\n} from \"../../store/actions/FetchDataActions\";\n\nexport interface SearchSectionProps {}\n\nexport const SearchSection: React.SFC<SearchSectionProps> = () => {\n  const isFetching = useSelector(\n    (state: { fetchData: GlobalAction }) => state.fetchData.featching\n  );\n  const isSearchResultsVisible = useSelector(\n    (state: { searching: GlobalAction }) =>\n      state.searching.isSearchResultsVisible\n  );\n  const accessToken = useSelector(\n    (state: { authorization: GlobalAction }) => state.authorization.access_token\n  );\n  const refresh_token = useSelector(\n    (state: { authorization: GlobalAction }) =>\n      state.authorization.refresh_token\n  );\n  const [inputValue, setInputValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (inputValue !== \"\") {\n      dispatch(dataFetching());\n      fetch(`https://api.spotify.com/v1/search?q=${inputValue}&type=album`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then((res: Response) => {\n          if (res.status === 200) return res.json();\n          throw new Error();\n        })\n        .then((res) => {\n          dispatch(dataFetched());\n          dispatch(searchAlbums(res.albums.items));\n        })\n        .catch((err) => {\n          dispatch(dataError(err.message));\n          refreshAccessToken(\n            refresh_token,\n            dispatch,\n            setAccessTokens,\n            searchAlbums\n          );\n        });\n    } else {\n      dispatch(searchAlbums([]));\n    }\n  };\n\n  return (\n    <section className=\"searchsection\">\n      {isFetching ? <LoadingPage /> : null}\n      <form\n        className=\"searchsection__form\"\n        onSubmit={(e) => {\n          dispatch(showSearchResults());\n          handleSubmit(e);\n        }}\n      >\n        <div className=\"relative\">\n          <SearchInput\n            value={inputValue}\n            setValue={setInputValue}\n            showResults={showSearchResults}\n            dispatch={dispatch}\n          />\n          <SearchButton />\n        </div>\n      </form>\n      <div className=\"searchsection__resultsPosition\">\n        {isSearchResultsVisible ? <SearchResult /> : null}\n      </div>\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./AlbumDetails.scss\";\n\nexport interface AlbumDetailsProps {\n  albumDetails: {\n    albumIMG: string;\n    artistName: string;\n    albumName: string;\n    spotifyAlbumURL: string;\n    albumID: string;\n  };\n  tracksListCurrentAlbum: any[];\n  dispatch: Function;\n  hideAlbumDetails: Function;\n  deleteAlbumFromList: Function;\n}\n\nexport const AlbumDetails: React.SFC<AlbumDetailsProps> = ({\n  albumDetails,\n  tracksListCurrentAlbum,\n  dispatch,\n  hideAlbumDetails,\n  deleteAlbumFromList,\n}) => (\n  <div className=\"albumssection__detailsAlbum\">\n    <div className=\"albumssection__albumInfoWrapper\">\n      <img\n        className=\"albumssection__detailsImage\"\n        src={albumDetails.albumIMG}\n        alt=\"Album\"\n      />\n      <div className=\"albumssection__detailsNameWrapper\">\n        <h1 className=\"albumssection__detailsArtistName\">\n          {albumDetails.artistName}\n        </h1>\n        <h2 className=\"albumssection__detailsAlbumName\">\n          {albumDetails.albumName}\n        </h2>\n      </div>\n      <div className=\"albumssection__detailsButtonsWrapper\">\n        <a\n          className=\"albumssection__detailsFullAlbumSpotify\"\n          href={albumDetails.spotifyAlbumURL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Pełny album znajdziesz tutaj\n        </a>\n        <button\n          className=\"albumssection__detailsDeleteAlbum\"\n          onClick={() => {\n            dispatch(hideAlbumDetails());\n            dispatch(deleteAlbumFromList(albumDetails.albumID));\n          }}\n        >\n          Usuń album z ulubionych\n        </button>\n      </div>\n    </div>\n    <div className=\"albumssection__tracksWrapper\">{tracksListCurrentAlbum}</div>\n    <button\n      className=\"albumssection__detailsClose\"\n      onClick={() => dispatch(hideAlbumDetails())}\n    >\n      <i className=\"fas fa-times\"></i>\n    </button>\n  </div>\n);\n","import React from \"react\";\nimport \"./Album.scss\";\nimport { AlbumDetails } from \"../../../store/storeInterfaces\";\n\nexport interface AlbumProps {\n  album: AlbumDetails;\n  dispatch: Function;\n  showAlbumDetails: Function;\n  setAlbumDetails: Function;\n}\n\nexport const Album: React.SFC<AlbumProps> = ({\n  album,\n  dispatch,\n  showAlbumDetails,\n  setAlbumDetails,\n}) => (\n  <div className=\"albumssection__wrapper\">\n    <img src={album.albumIMG} alt=\"Album\" className=\"albumssection__image\" />\n\n    <div\n      className=\"albumssection__hoverDiv\"\n      onClick={() => {\n        dispatch(showAlbumDetails());\n        dispatch(\n          setAlbumDetails({\n            albumIMG: album.albumIMG,\n            albumID: album.albumID,\n            albumName: album.albumName,\n            artistName: album.artistName,\n            tracks: album.tracks,\n            spotifyAlbumURL: album.spotifyAlbumURL,\n          })\n        );\n      }}\n    >\n      <p className=\"albumssection__nameHover\">{album.artistName}</p>\n      <p className=\"albumssection__nameHover\">{album.albumName}</p>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport \"./Tracks.scss\";\nimport { Track } from \"../AlbumsSection\";\n\nexport interface TracksProps {\n  track: Track;\n  answer: boolean;\n  classesBtn: string;\n  classes: string;\n  dispatch: Function;\n  stopMusic: Function;\n  setAndPlayCurrentTrack: Function;\n}\n\nexport const Tracks: React.SFC<TracksProps> = ({\n  track,\n  answer,\n  classesBtn,\n  classes,\n  dispatch,\n  stopMusic,\n  setAndPlayCurrentTrack,\n}) => (\n  <div className=\"albumssection__trackWrapper\">\n    {track.preview_url ? (\n      answer ? (\n        <button\n          className={classesBtn}\n          onClick={() => {\n            dispatch(stopMusic());\n          }}\n        >\n          Stop\n        </button>\n      ) : (\n        <button\n          className=\"albumssection__detailsTrackButton\"\n          onClick={() => {\n            dispatch(setAndPlayCurrentTrack(track.preview_url));\n          }}\n        >\n          Play\n        </button>\n      )\n    ) : (\n      <button className=\"albumssection__detailsTrackButton\" disabled>\n        Play\n      </button>\n    )}\n\n    <p className={classes}>\n      {track.track_number}. {track.name}\n    </p>\n  </div>\n);\n","import { SET_AND_PLAY_CURRENT_TRACK, STOP_PLAYING_TRACK } from \"../types\";\n\nexport const setAndPlayCurrentTrack = (trackURL: string) => {\n  return {\n    type: SET_AND_PLAY_CURRENT_TRACK,\n    trackURL: trackURL,\n  };\n};\n\nexport const stopMusic = () => {\n  return {\n    type: STOP_PLAYING_TRACK,\n  };\n};\n","import {\n  SHOW_ALBUM_DETAILS,\n  HIDE_ALBUM_DETAILS,\n  SET_ALBUM_DETAILS,\n} from \"../types\";\nimport { AlbumDetails } from \"../storeInterfaces\";\n\nexport const showAlbumDetails = () => ({\n  type: SHOW_ALBUM_DETAILS,\n  isAlbumDetailsVisible: true,\n});\n\nexport const hideAlbumDetails = () => ({\n  type: HIDE_ALBUM_DETAILS,\n  isAlbumDetailsVisible: false,\n});\n\nexport const setAlbumDetails = (albumDetails: AlbumDetails) => ({\n  type: SET_ALBUM_DETAILS,\n  albumDetails: albumDetails,\n});\n","import React from \"react\";\nimport \"./AlbumsSection.scss\";\nimport { AlbumDetails } from \"./AlbumDetails/AlbumDetails\";\nimport { Album } from \"./Album/Album\";\nimport { Tracks } from \"./Tracks/Tracks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteAlbumFromList } from \"../../store/actions/AddToFavouriteActions\";\nimport {\n  setAndPlayCurrentTrack,\n  stopMusic,\n} from \"../../store/actions/PlayerActions\";\nimport {\n  hideAlbumDetails,\n  showAlbumDetails,\n  setAlbumDetails,\n} from \"../../store/actions/AlbumDetailsActions\";\nimport {\n  GlobalAction,\n  AlbumDetails as AlbumDetailsInterface,\n} from \"../../store/storeInterfaces\";\n\nexport interface Track {\n  id: string;\n  track_number: number;\n  name: string;\n  preview_url: string;\n}\n\nexport const AlbumsSection: React.SFC = () => {\n  const favouriteAlbums = useSelector(\n    (state: { favouriteAlbums: GlobalAction }) =>\n      state.favouriteAlbums.favouriteAlbums\n  );\n  const currentTrack = useSelector(\n    (state: { player: GlobalAction }) => state.player.trackURL\n  );\n  const isPlaying = useSelector(\n    (state: { player: GlobalAction }) => state.player.isPlaying\n  );\n  const albumDetails = useSelector(\n    (state: { albumDetails: GlobalAction }) => state.albumDetails.albumDetails\n  );\n  const albumDetailsVisible = useSelector(\n    (state: { albumDetails: GlobalAction }) =>\n      state.albumDetails.isAlbumDetailsVisible\n  );\n  const dispatch = useDispatch();\n\n  const albums = favouriteAlbums.map((album: AlbumDetailsInterface) => {\n    return (\n      <Album\n        key={album.albumID}\n        album={album}\n        dispatch={dispatch}\n        showAlbumDetails={showAlbumDetails}\n        setAlbumDetails={setAlbumDetails}\n      />\n    );\n  });\n\n  const tracksListCurrentAlbum = albumDetails.tracks.map((track: Track) => {\n    const answer =\n      isPlaying && currentTrack === track.preview_url ? true : false;\n    const classes = answer\n      ? \"albumssection__detailsTrackName albumssection__detailsTrackName--green\"\n      : \"albumssection__detailsTrackName\";\n    const classesBtn = answer\n      ? \"albumssection__detailsTrackButton albumssection__detailsTrackButton--green\"\n      : \"albumssection__detailsTrackButton\";\n    return (\n      <Tracks\n        key={track.id}\n        track={track}\n        answer={answer}\n        classesBtn={classesBtn}\n        classes={classes}\n        dispatch={dispatch}\n        stopMusic={stopMusic}\n        setAndPlayCurrentTrack={setAndPlayCurrentTrack}\n      />\n    );\n  });\n\n  return (\n    <section className=\"albumssection\">\n      {albums.length ? (\n        albums.reverse()\n      ) : (\n        <div className=\"albumssection__noResults\">\n          <p>Brak danych</p>\n        </div>\n      )}\n\n      {albumDetailsVisible ? (\n        <AlbumDetails\n          albumDetails={albumDetails}\n          tracksListCurrentAlbum={tracksListCurrentAlbum}\n          dispatch={dispatch}\n          hideAlbumDetails={hideAlbumDetails}\n          deleteAlbumFromList={deleteAlbumFromList}\n        />\n      ) : null}\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./Main.scss\";\nimport { SearchSection } from \"../SearchSection/SearchSection\";\nimport { AlbumsSection } from \"../AlbumsSection/AlbumsSection\";\n\nexport const Main: React.SFC = () => (\n  <main className=\"main\">\n    <SearchSection />\n    <AlbumsSection />\n  </main>\n);\n","import React from \"react\";\nimport \"./Footer.scss\";\n\nexport const Footer: React.SFC = () => (\n  <footer className=\"footer\">\n    <p className=\"footer__author\">Projekt i realizacja Marcin Hercog</p>\n  </footer>\n);\n","import React from \"react\";\nimport \"./WebsitePage.scss\";\nimport { Header } from \"../../components/Header/Header\";\nimport { Main } from \"../../components/Main/Main\";\nimport { Footer } from \"../../components/Footer/Footer\";\n\nexport interface WebsitePageProps {}\n\nexport const WebsitePage: React.SFC<WebsitePageProps> = () => (\n  <div className=\"websitepage\">\n    <Header />\n    <Main />\n    <Footer />\n  </div>\n);\n","import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { LoginPage } from \"./pages/LoginPage/LoginPage\";\nimport { WebsitePage } from \"./pages/WebsitePage/WebsitePage\";\nimport { getOptionsToConnect } from \"./authorization/config\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAccessTokens } from \"./store/actions/AuthorizationActions\";\nimport {\n  dataFetching,\n  dataFetched,\n  dataError,\n} from \"./store/actions/FetchDataActions\";\nimport { LoadingPage } from \"./pages/LoadingPage/LoadingPage\";\nimport { showSearchResults } from \"./store/actions/SearchingActions\";\n\nexport const App = () => {\n  const connectOptions = getOptionsToConnect();\n  const { codeToGetAccess, fetchOptions } = connectOptions;\n  const accessToken = useSelector(\n    (state: { authorization: { access_token: string } }) =>\n      state.authorization.access_token\n  );\n  const isFetching = useSelector(\n    (state: { fetchData: { featching: boolean } }) => state.fetchData.featching\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (codeToGetAccess && !accessToken) {\n      dispatch(dataFetching());\n      fetch(`https://accounts.spotify.com/api/token`, fetchOptions)\n        .then((res: Response) => {\n          if (res.status === 200) return res.json();\n          throw new Error();\n        })\n        .then((res: { access_token: string; refresh_token: string }) => {\n          dispatch(dataFetched());\n          dispatch(setAccessTokens(res.access_token, res.refresh_token));\n          localStorage.setItem(\"access_token\", res.access_token);\n          localStorage.setItem(\"refresh_token\", res.refresh_token);\n        })\n        .catch((err: Error) => {\n          dispatch(dataError(err.message));\n          console.log(err);\n        });\n    }\n\n    if (!codeToGetAccess) {\n      localStorage.setItem(\"access_token\", \"\");\n      localStorage.setItem(\"refresh_token\", \"\");\n    }\n\n    if (window.innerWidth >= 1024) {\n      dispatch(showSearchResults());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {isFetching ? <LoadingPage /> : null}\n      {accessToken ? <WebsitePage /> : <LoginPage />}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_ACCESS_TOKENS } from \"../types\";\nimport { getCodeFromUrl } from \"../../authorization/config\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst accessLocal = getCodeFromUrl()\n  ? String(localStorage.getItem(\"access_token\"))\n  : \"\";\nconst refreshLocal = localStorage.getItem(\"refresh_token\")\n  ? String(localStorage.getItem(\"refresh_token\"))\n  : \"\";\n\nconst INITIAL_STATE: GlobalState = {\n  access_token: accessLocal,\n  refresh_token: refreshLocal,\n};\n\nexport const authorizationReducers = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SET_ACCESS_TOKENS:\n      return {\n        ...state,\n        access_token: action.access_token,\n        refresh_token: action.refresh_token,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  SEARCH_ALBUMS,\n  SHOW_SEARCH_RESULTS,\n  HIDE_SEARCH_RESULTS,\n} from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst INITIAL_STATE: GlobalState = {\n  listOfAlbums: [],\n  isSearchResultsVisible: false,\n};\n\nexport const searchingReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SHOW_SEARCH_RESULTS:\n      return {\n        ...state,\n        isSearchResultsVisible: action.isSearchResultsVisible,\n      };\n    case HIDE_SEARCH_RESULTS:\n      return {\n        ...state,\n        isSearchResultsVisible: action.isSearchResultsVisible,\n      };\n    case SEARCH_ALBUMS:\n      return {\n        ...state,\n        listOfAlbums: action.listOfAlbums,\n      };\n    default:\n      return state;\n  }\n};\n","import { ADD_ALBUM_TO_LIST, DELETE_ALBUM_FROM_LIST } from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst local = localStorage.getItem(\"favouriteAlbums\")\n  ? localStorage.getItem(\"favouriteAlbums\")\n  : \"\";\n\nconst INITIAL_STATE: GlobalState = {\n  favouriteAlbums: local ? JSON.parse(local) : [],\n};\n\nexport const addFavouriteAlbumReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case ADD_ALBUM_TO_LIST:\n      const newAlbum = {\n        albumIMG: action.albumIMG,\n        albumID: action.albumID,\n        albumName: action.albumName,\n        artistName: action.artistName,\n        tracks: action.tracks,\n        spotifyAlbumURL: action.spotifyAlbumURL,\n      };\n      localStorage.setItem(\n        \"favouriteAlbums\",\n        JSON.stringify([...state.favouriteAlbums, newAlbum])\n      );\n      return {\n        ...state,\n        favouriteAlbums: [...state.favouriteAlbums, newAlbum],\n      };\n    case DELETE_ALBUM_FROM_LIST:\n      const newListWithoutAlbum = state.favouriteAlbums.filter(\n        (album: { albumID: string }) => album.albumID !== action.albumID\n      );\n      localStorage.setItem(\n        \"favouriteAlbums\",\n        JSON.stringify(newListWithoutAlbum)\n      );\n      return {\n        ...state,\n        favouriteAlbums: newListWithoutAlbum,\n      };\n    default:\n      return state;\n  }\n};\n","import { SET_AND_PLAY_CURRENT_TRACK, STOP_PLAYING_TRACK } from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst player = new Audio();\n\nconst INITIAL_STATE: GlobalState = {\n  trackURL: \"\",\n  isPlaying: false,\n};\n\nexport const currentTrackReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SET_AND_PLAY_CURRENT_TRACK:\n      player.src = action.trackURL;\n      player.play();\n      return {\n        ...state,\n        trackURL: action.trackURL,\n        isPlaying: true,\n      };\n    case STOP_PLAYING_TRACK:\n      player.pause();\n      return {\n        ...state,\n        trackURL: \"\",\n        isPlaying: false,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  SHOW_ALBUM_DETAILS,\n  HIDE_ALBUM_DETAILS,\n  SET_ALBUM_DETAILS,\n} from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst INITIAL_STATE: GlobalState = {\n  isAlbumDetailsVisible: false,\n  albumDetails: {\n    albumIMG: \"\",\n    albumID: \"\",\n    albumName: \"\",\n    artistName: \"\",\n    tracks: [],\n    spotifyAlbumURL: \"\",\n  },\n};\n\nexport const albumDetailsReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case SHOW_ALBUM_DETAILS:\n      return {\n        ...state,\n        isAlbumDetailsVisible: action.isAlbumDetailsVisible,\n      };\n    case HIDE_ALBUM_DETAILS:\n      return {\n        ...state,\n        isAlbumDetailsVisible: action.isAlbumDetailsVisible,\n      };\n    case SET_ALBUM_DETAILS:\n      return {\n        ...state,\n        albumDetails: action.albumDetails,\n      };\n    default:\n      return state;\n  }\n};\n","import { DATA_FETCHING, DATA_FETCHED, DATA_ERROR } from \"../types\";\nimport { GlobalState, GlobalAction } from \"../storeInterfaces\";\n\nconst INITIAL_STATE: GlobalState = {\n  featching: false,\n  featched: false,\n  error: false,\n  errorMessage: \"\",\n};\n\nexport const dataFetchReducer = (\n  state = INITIAL_STATE,\n  action: GlobalAction\n) => {\n  switch (action.type) {\n    case DATA_FETCHING:\n      return {\n        ...state,\n        featching: true,\n        featched: false,\n        error: false,\n        errorMessage: \"\",\n      };\n    case DATA_FETCHED:\n      return {\n        ...state,\n        featching: false,\n        featched: true,\n        error: false,\n        errorMessage: \"\",\n      };\n    case DATA_ERROR:\n      return {\n        ...state,\n        featching: false,\n        featched: false,\n        error: true,\n        errorMessage: action.errorMessage,\n      };\n    default:\n      return state;\n  }\n};\n","import { authorizationReducers } from \"./AuthorizationReducers\";\nimport { searchingReducer } from \"./SearchingReducers\";\nimport { addFavouriteAlbumReducer } from \"./AddToFavouriteReducers\";\nimport { currentTrackReducer } from \"./PlayerReducers\";\nimport { albumDetailsReducer } from \"./AlbumDetailsReducers\";\nimport { dataFetchReducer } from \"./FetchDataReducers\";\nimport { combineReducers } from \"redux\";\n\nexport const rootReducer = combineReducers({\n  authorization: authorizationReducers,\n  searching: searchingReducer,\n  favouriteAlbums: addFavouriteAlbumReducer,\n  player: currentTrackReducer,\n  albumDetails: albumDetailsReducer,\n  fetchData: dataFetchReducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers\";\n\nconst devTools = composeWithDevTools(applyMiddleware(thunk));\n\nexport const store = createStore(rootReducer, devTools);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}